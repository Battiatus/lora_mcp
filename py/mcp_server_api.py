"""
MCP Server expos√© en tant qu'API REST avec documentation Swagger automatique
"""

from fastapi import FastAPI, HTTPException, Depends, Security, BackgroundTasks, File, UploadFile
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse, StreamingResponse
from pydantic import BaseModel, Field, HttpUrl
from typing import Optional, List, Dict, Any, Union
from datetime import datetime, timedelta
import asyncio
import uuid
import json
import base64
from enum import Enum

# Import du serveur MCP existant
from server import mcp_host, app_lifespan, AppContext, SESSION_ID

# Mod√®les Pydantic pour la validation des donn√©es
class ToolName(str, Enum):
    """√ânum√©ration des outils disponibles"""
    NAVIGATE = "navigate"
    SCREENSHOT = "screenshot"
    CLICK = "click"
    SCROLL = "scroll"
    TYPE = "type"
    GET_PAGE_INFO = "get_page_info"
    GET_ELEMENT_BY_SELECTOR = "get_element_by_selector"
    CLICK_ELEMENT = "click_element"
    TYPE_IN_ELEMENT = "type_in_element"
    EXTRACT_TEXT = "extract_text"
    WAIT_FOR_NAVIGATION = "wait_for_navigation"
    EVALUATE_JAVASCRIPT = "evaluate_javascript"
    BYPASS_COOKIE_CONSENT = "bypass_cookie_consent"
    FIND_VIDEOS_ON_PAGE = "find_videos_on_page"
    DOWNLOAD_VIDEO = "download_video"
    DOWNLOAD_PAGE_VIDEO = "download_page_video"
    DETECT_AND_SOLVE_CAPTCHA = "detect_and_solve_captcha"
    NAVIGATE_TIKTOK = "navigate_tiktok"
    WRITE_FILE = "write_file"
    TRANSLATE_LLM = "translate_llm"

class NavigateRequest(BaseModel):
    """Param√®tres pour naviguer vers une URL"""
    url: HttpUrl = Field(..., description="URL vers laquelle naviguer", example="https://example.com")
    session_id: Optional[str] = Field(None, description="ID de session pour r√©utiliser un contexte")
    
    class Config:
        json_schema_extra = {
            "example": {
                "url": "https://www.example.com",
                "session_id": "optional-session-id"
            }
        }

class ClickRequest(BaseModel):
    """Param√®tres pour cliquer √† des coordonn√©es sp√©cifiques"""
    x: int = Field(..., description="Coordonn√©e X du clic", ge=0)
    y: int = Field(..., description="Coordonn√©e Y du clic", ge=0)
    session_id: str = Field(..., description="ID de session requis")
    
    class Config:
        json_schema_extra = {
            "example": {
                "x": 100,
                "y": 200,
                "session_id": "session-123"
            }
        }

class ScrollRequest(BaseModel):
    """Param√®tres pour faire d√©filer la page"""
    direction: str = Field(..., description="Direction du d√©filement", pattern="^(up|down)$")
    amount: int = Field(..., description="Quantit√© de d√©filement en pixels", ge=0)
    session_id: str = Field(..., description="ID de session requis")

class TypeRequest(BaseModel):
    """Param√®tres pour taper du texte"""
    text: str = Field(..., description="Texte √† saisir")
    submit: bool = Field(False, description="Appuyer sur Entr√©e apr√®s la saisie")
    session_id: str = Field(..., description="ID de session requis")

class ElementSelectorRequest(BaseModel):
    """Param√®tres pour interagir avec un √©l√©ment via s√©lecteur CSS"""
    selector: str = Field(..., description="S√©lecteur CSS de l'√©l√©ment", example="button.submit")
    session_id: str = Field(..., description="ID de session requis")

class TypeInElementRequest(BaseModel):
    """Param√®tres pour taper dans un √©l√©ment sp√©cifique"""
    selector: str = Field(..., description="S√©lecteur CSS de l'√©l√©ment")
    text: str = Field(..., description="Texte √† saisir")
    submit: bool = Field(False, description="Appuyer sur Entr√©e apr√®s la saisie")
    session_id: str = Field(..., description="ID de session requis")

class JavaScriptRequest(BaseModel):
    """Param√®tres pour ex√©cuter du JavaScript"""
    script: str = Field(..., description="Code JavaScript √† ex√©cuter")
    session_id: str = Field(..., description="ID de session requis")

class VideoDownloadRequest(BaseModel):
    """Param√®tres pour t√©l√©charger une vid√©o"""
    url: HttpUrl = Field(..., description="URL de la vid√©o √† t√©l√©charger")
    filename: Optional[str] = Field(None, description="Nom de fichier personnalis√©")
    session_id: str = Field(..., description="ID de session requis")

class PageVideoDownloadRequest(BaseModel):
    """Param√®tres pour t√©l√©charger une vid√©o de la page"""
    index: int = Field(..., description="Index de la vid√©o sur la page", ge=0)
    filename: Optional[str] = Field(None, description="Nom de fichier personnalis√©")
    session_id: str = Field(..., description="ID de session requis")

class WriteFileRequest(BaseModel):
    """Param√®tres pour √©crire un fichier"""
    filename: str = Field(..., description="Nom du fichier √† cr√©er")
    content: str = Field(..., description="Contenu du fichier")
    session_id: str = Field(..., description="ID de session requis")

class TranslateRequest(BaseModel):
    """Param√®tres pour traduire du texte"""
    text: str = Field(..., description="Texte √† traduire")
    source_language: str = Field(..., description="Code de langue source", example="en")
    target_language: str = Field(..., description="Code de langue cible", example="fr")

class SessionResponse(BaseModel):
    """R√©ponse contenant les informations de session"""
    session_id: str
    created_at: datetime
    status: str = "active"

class ToolResponse(BaseModel):
    """R√©ponse g√©n√©rique pour les outils"""
    success: bool
    session_id: str
    result: Dict[str, Any]
    error: Optional[str] = None

class ScreenshotResponse(BaseModel):
    """R√©ponse pour une capture d'√©cran"""
    success: bool
    session_id: str
    filename: str
    image_base64: str
    format: str = "jpeg"

# Initialisation de l'API FastAPI
app = FastAPI(
    title="MCP Server API",
    description="""
    API REST pour le serveur MCP (Model Context Protocol) avec automatisation web via Playwright.
    
    ## Fonctionnalit√©s principales
    
    * üåê **Navigation web** - Navigation automatis√©e avec anti-d√©tection
    * üì∏ **Captures d'√©cran** - Capture de pages web
    * üñ±Ô∏è **Interactions** - Clic, saisie de texte, d√©filement
    * üé¨ **T√©l√©chargement vid√©o** - Support YouTube, TikTok, etc.
    * üîç **Extraction de donn√©es** - S√©lecteurs CSS, JavaScript
    * ü§ñ **R√©solution CAPTCHA** - D√©tection et r√©solution automatique
    * üåç **Traduction** - Via Google Translate API
    
    ## Authentification
    
    Utiliser un token Bearer dans l'en-t√™te Authorization.
    
    ## Sessions
    
    La plupart des op√©rations n√©cessitent une session active. Cr√©er une session avec `/sessions` avant d'utiliser les outils.
    """,
    version="1.0.0",
    terms_of_service="https://example.com/terms/",
    contact={
        "name": "MCP Server Support",
        "email": "support@example.com",
    },
    license_info={
        "name": "Apache 2.0",
        "url": "https://www.apache.org/licenses/LICENSE-2.0.html",
    },
)

# Configuration CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # √Ä restreindre en production
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# S√©curit√©
security = HTTPBearer()

# Gestionnaire de sessions
class SessionManager:
    def __init__(self):
        self.sessions = {}
        self.contexts = {}
    
    async def create_session(self) -> str:
        """Cr√©e une nouvelle session"""
        session_id = str(uuid.uuid4())
        self.sessions[session_id] = {
            "id": session_id,
            "created_at": datetime.utcnow(),
            "last_activity": datetime.utcnow(),
            "status": "active"
        }
        # Initialiser le contexte Playwright pour cette session
        # (√Ä impl√©menter avec la logique du serveur MCP)
        return session_id
    
    def get_session(self, session_id: str) -> Optional[dict]:
        """R√©cup√®re une session existante"""
        return self.sessions.get(session_id)
    
    def update_activity(self, session_id: str):
        """Met √† jour l'activit√© de la session"""
        if session_id in self.sessions:
            self.sessions[session_id]["last_activity"] = datetime.utcnow()

session_manager = SessionManager()

# Fonction de v√©rification du token
async def verify_token(credentials: HTTPAuthorizationCredentials = Security(security)):
    """V√©rifie le token d'authentification"""
    token = credentials.credentials
    # Impl√©menter la v√©rification du token ici
    # Pour l'exemple, on accepte tout token non vide
    if not token:
        raise HTTPException(status_code=401, detail="Invalid authentication credentials")
    return token

# Routes de sant√©
@app.get("/", tags=["Health"])
async def root():
    """Point de terminaison racine"""
    return {
        "message": "MCP Server API",
        "version": "1.0.0",
        "documentation": "/docs",
        "openapi": "/openapi.json"
    }

@app.get("/health", tags=["Health"])
async def health_check():
    """V√©rification de l'√©tat de sant√© du service"""
    return {
        "status": "healthy",
        "timestamp": datetime.utcnow().isoformat(),
        "service": "mcp-server-api"
    }

# Gestion des sessions
@app.post("/sessions", response_model=SessionResponse, tags=["Sessions"])
async def create_session(token: str = Depends(verify_token)):
    """
    Cr√©e une nouvelle session de navigation.
    
    Une session est n√©cessaire pour utiliser la plupart des outils.
    La session maintient l'√©tat du navigateur entre les appels.
    """
    session_id = await session_manager.create_session()
    return SessionResponse(
        session_id=session_id,
        created_at=datetime.utcnow(),
        status="active"
    )

@app.get("/sessions/{session_id}", response_model=SessionResponse, tags=["Sessions"])
async def get_session(session_id: str, token: str = Depends(verify_token)):
    """R√©cup√®re les informations d'une session"""
    session = session_manager.get_session(session_id)
    if not session:
        raise HTTPException(status_code=404, detail="Session not found")
    return SessionResponse(**session)

@app.delete("/sessions/{session_id}", tags=["Sessions"])
async def close_session(session_id: str, token: str = Depends(verify_token)):
    """Ferme une session et lib√®re les ressources"""
    session = session_manager.get_session(session_id)
    if not session:
        raise HTTPException(status_code=404, detail="Session not found")
    
    # Nettoyer les ressources de la session
    session["status"] = "closed"
    return {"message": "Session closed successfully"}

# Outils de navigation
@app.post("/tools/navigate", response_model=ToolResponse, tags=["Navigation"])
async def navigate(request: NavigateRequest, token: str = Depends(verify_token)):
    """
    Navigue vers une URL sp√©cifi√©e.
    
    Supporte la d√©tection et r√©solution automatique de CAPTCHA.
    Pour TikTok, utilise automatiquement des techniques anti-d√©tection avanc√©es.
    """
    session_id = request.session_id or await session_manager.create_session()
    session_manager.update_activity(session_id)
    
    # Simuler l'appel √† l'outil MCP
    # Dans l'impl√©mentation r√©elle, appeler l'outil navigate du serveur MCP
    result = {
        "title": "Example Domain",
        "url": str(request.url),
        "status_code": 200
    }
    
    return ToolResponse(
        success=True,
        session_id=session_id,
        result=result
    )

@app.post("/tools/screenshot", response_model=ScreenshotResponse, tags=["Navigation"])
async def take_screenshot(session_id: str, token: str = Depends(verify_token)):
    """
    Prend une capture d'√©cran de la page actuelle.
    
    Retourne l'image en base64.
    """
    session = session_manager.get_session(session_id)
    if not session:
        raise HTTPException(status_code=404, detail="Session not found")
    
    session_manager.update_activity(session_id)
    
    # Simuler la prise de screenshot
    # Dans l'impl√©mentation r√©elle, appeler l'outil screenshot du serveur MCP
    fake_image = base64.b64encode(b"fake_image_data").decode()
    
    return ScreenshotResponse(
        success=True,
        session_id=session_id,
        filename=f"screenshot_{uuid.uuid4()}.jpeg",
        image_base64=fake_image
    )

@app.post("/tools/click", response_model=ToolResponse, tags=["Interaction"])
async def click(request: ClickRequest, token: str = Depends(verify_token)):
    """
    Clique aux coordonn√©es sp√©cifi√©es.
    
    Simule un mouvement de souris naturel avant le clic.
    """
    session = session_manager.get_session(request.session_id)
    if not session:
        raise HTTPException(status_code=404, detail="Session not found")
    
    session_manager.update_activity(request.session_id)
    
    # Simuler le clic
    result = {
        "clicked_at": {"x": request.x, "y": request.y}
    }
    
    return ToolResponse(
        success=True,
        session_id=request.session_id,
        result=result
    )

@app.post("/tools/type", response_model=ToolResponse, tags=["Interaction"])
async def type_text(request: TypeRequest, token: str = Depends(verify_token)):
    """
    Tape du texte dans l'√©l√©ment actuellement focalis√©.
    
    Simule une vitesse de frappe humaine avec des variations.
    """
    session = session_manager.get_session(request.session_id)
    if not session:
        raise HTTPException(status_code=404, detail="Session not found")
    
    session_manager.update_activity(request.session_id)
    
    result = {
        "typed": True,
        "text": request.text,
        "submitted": request.submit
    }
    
    return ToolResponse(
        success=True,
        session_id=request.session_id,
        result=result
    )

@app.post("/tools/scroll", response_model=ToolResponse, tags=["Interaction"])
async def scroll(request: ScrollRequest, token: str = Depends(verify_token)):
    """Fait d√©filer la page dans la direction sp√©cifi√©e"""
    session = session_manager.get_session(request.session_id)
    if not session:
        raise HTTPException(status_code=404, detail="Session not found")
    
    session_manager.update_activity(request.session_id)
    
    result = {
        "scrolled": True,
        "direction": request.direction,
        "amount": request.amount
    }
    
    return ToolResponse(
        success=True,
        session_id=request.session_id,
        result=result
    )

@app.post("/tools/element/find", response_model=ToolResponse, tags=["Elements"])
async def find_element(request: ElementSelectorRequest, token: str = Depends(verify_token)):
    """
    Trouve un √©l√©ment sur la page en utilisant un s√©lecteur CSS.
    
    Retourne les informations sur l'√©l√©ment incluant sa position et son contenu.
    """
    session = session_manager.get_session(request.session_id)
    if not session:
        raise HTTPException(status_code=404, detail="Session not found")
    
    session_manager.update_activity(request.session_id)
    
    # Simuler la recherche d'√©l√©ment
    result = {
        "found": True,
        "tag": "BUTTON",
        "text": "Submit",
        "visible": True,
        "coordinates": {
            "x": 100,
            "y": 200,
            "width": 80,
            "height": 30,
            "center_x": 140,
            "center_y": 215
        }
    }
    
    return ToolResponse(
        success=True,
        session_id=request.session_id,
        result=result
    )

@app.post("/tools/element/click", response_model=ToolResponse, tags=["Elements"])
async def click_element(request: ElementSelectorRequest, token: str = Depends(verify_token)):
    """Clique sur un √©l√©ment identifi√© par un s√©lecteur CSS"""
    session = session_manager.get_session(request.session_id)
    if not session:
        raise HTTPException(status_code=404, detail="Session not found")
    
    session_manager.update_activity(request.session_id)
    
    result = {
        "clicked": True,
        "selector": request.selector
    }
    
    return ToolResponse(
        success=True,
        session_id=request.session_id,
        result=result
    )

@app.post("/tools/element/type", response_model=ToolResponse, tags=["Elements"])
async def type_in_element(request: TypeInElementRequest, token: str = Depends(verify_token)):
    """Tape du texte dans un √©l√©ment sp√©cifique"""
    session = session_manager.get_session(request.session_id)
    if not session:
        raise HTTPException(status_code=404, detail="Session not found")
    
    session_manager.update_activity(request.session_id)
    
    result = {
        "typed": True,
        "selector": request.selector,
        "text": request.text,
        "submitted": request.submit
    }
    
    return ToolResponse(
        success=True,
        session_id=request.session_id,
        result=result
    )

@app.post("/tools/element/extract-text", response_model=ToolResponse, tags=["Elements"])
async def extract_text(request: ElementSelectorRequest, token: str = Depends(verify_token)):
    """
    Extrait le texte de tous les √©l√©ments correspondant au s√©lecteur CSS.
    
    Utile pour scraper du contenu de pages web.
    """
    session = session_manager.get_session(request.session_id)
    if not session:
        raise HTTPException(status_code=404, detail="Session not found")
    
    session_manager.update_activity(request.session_id)
    
    # Simuler l'extraction de texte
    result = {
        "found": True,
        "count": 3,
        "elements": [
            {"index": 0, "text": "Premier √©l√©ment"},
            {"index": 1, "text": "Deuxi√®me √©l√©ment"},
            {"index": 2, "text": "Troisi√®me √©l√©ment"}
        ]
    }
    
    return ToolResponse(
        success=True,
        session_id=request.session_id,
        result=result
    )

@app.post("/tools/javascript", response_model=ToolResponse, tags=["Advanced"])
async def execute_javascript(request: JavaScriptRequest, token: str = Depends(verify_token)):
    """
    Ex√©cute du code JavaScript dans le contexte du navigateur.
    
    ‚ö†Ô∏è Utiliser avec pr√©caution - peut modifier l'√©tat de la page.
    """
    session = session_manager.get_session(request.session_id)
    if not session:
        raise HTTPException(status_code=404, detail="Session not found")
    
    session_manager.update_activity(request.session_id)
    
    # Simuler l'ex√©cution JavaScript
    result = {
        "executed": True,
        "result": "Script executed successfully"
    }
    
    return ToolResponse(
        success=True,
        session_id=request.session_id,
        result=result
    )

@app.post("/tools/video/find", response_model=ToolResponse, tags=["Video"])
async def find_videos(session_id: str, token: str = Depends(verify_token)):
    """
    Trouve toutes les vid√©os pr√©sentes sur la page actuelle.
    
    D√©tecte les vid√©os HTML5, iframes YouTube/Vimeo, et autres formats.
    """
    session = session_manager.get_session(session_id)
    if not session:
        raise HTTPException(status_code=404, detail="Session not found")
    
    session_manager.update_activity(session_id)
    
    # Simuler la recherche de vid√©os
    result = {
        "found": True,
        "count": 2,
        "videos": [
            {
                "index": 0,
                "type": "video_element",
                "src": "https://example.com/video1.mp4",
                "width": "640",
                "height": "360"
            },
            {
                "index": 1,
                "type": "iframe_embed",
                "platform": "youtube",
                "src": "https://www.youtube.com/embed/dQw4w9WgXcQ",
                "width": "560",
                "height": "315"
            }
        ]
    }
    
    return ToolResponse(
        success=True,
        session_id=session_id,
        result=result
    )

@app.post("/tools/video/download", response_model=ToolResponse, tags=["Video"])
async def download_video(request: VideoDownloadRequest, token: str = Depends(verify_token)):
    """
    T√©l√©charge une vid√©o depuis une URL.
    
    Supporte YouTube, TikTok, Vimeo, et autres plateformes via yt-dlp.
    """
    session = session_manager.get_session(request.session_id)
    if not session:
        raise HTTPException(status_code=404, detail="Session not found")
    
    session_manager.update_activity(request.session_id)
    
    # Simuler le t√©l√©chargement
    result = {
        "success": True,
        "file_path": f"videos/{request.session_id}/video.mp4",
        "file_size": 10485760,  # 10 MB
        "file_size_human": "10.00 MB",
        "method": "yt-dlp"
    }
    
    return ToolResponse(
        success=True,
        session_id=request.session_id,
        result=result
    )

@app.post("/tools/captcha/detect", response_model=ToolResponse, tags=["CAPTCHA"])
async def detect_captcha(session_id: str, token: str = Depends(verify_token)):
    """
    D√©tecte et tente de r√©soudre automatiquement les CAPTCHA.
    
    Supporte reCAPTCHA, hCaptcha, et les puzzles coulissants (TikTok).
    """
    session = session_manager.get_session(session_id)
    if not session:
        raise HTTPException(status_code=404, detail="Session not found")
    
    session_manager.update_activity(session_id)
    
    # Simuler la d√©tection de CAPTCHA
    result = {
        "detected": True,
        "type": "recaptcha_v2",
        "solved": False,
        "message": "CAPTCHA detected, manual resolution required"
    }
    
    return ToolResponse(
        success=True,
        session_id=session_id,
        result=result
    )

@app.post("/tools/translate", response_model=ToolResponse, tags=["Translation"])
async def translate(request: TranslateRequest, token: str = Depends(verify_token)):
    """
    Traduit du texte entre diff√©rentes langues.
    
    Utilise Google Cloud Translation API.
    """
    # La traduction n'a pas besoin de session
    result = {
        "translated_text": f"[Traduction simul√©e de '{request.text}' de {request.source_language} vers {request.target_language}]",
        "source_language": request.source_language,
        "target_language": request.target_language
    }
    
    return ToolResponse(
        success=True,
        session_id="translation-no-session",
        result=result
    )

@app.post("/tools/file/write", response_model=ToolResponse, tags=["Files"])
async def write_file(request: WriteFileRequest, token: str = Depends(verify_token)):
    """
    √âcrit du contenu dans un fichier.
    
    Les fichiers sont stock√©s dans le contexte de la session.
    """
    session = session_manager.get_session(request.session_id)
    if not session:
        raise HTTPException(status_code=404, detail="Session not found")
    
    session_manager.update_activity(request.session_id)
    
    # Simuler l'√©criture du fichier
    result = {
        "success": True,
        "filename": request.filename,
        "path": f"artifacts/{request.session_id}/{request.filename}",
        "size": len(request.content)
    }
    
    return ToolResponse(
        success=True,
        session_id=request.session_id,
        result=result
    )

# Endpoint pour t√©l√©charger les fichiers g√©n√©r√©s
@app.get("/artifacts/{session_id}/{filename}", tags=["Files"])
async def download_artifact(session_id: str, filename: str, token: str = Depends(verify_token)):
    """T√©l√©charge un fichier artifact g√©n√©r√©"""
    # Simuler le t√©l√©chargement
    # Dans l'impl√©mentation r√©elle, servir le fichier depuis le stockage
    content = f"Contenu simul√© du fichier {filename}"
    return StreamingResponse(
        iter([content.encode()]),
        media_type="application/octet-stream",
        headers={
            "Content-Disposition": f"attachment; filename={filename}"
        }
    )

# Gestion des erreurs globales
@app.exception_handler(HTTPException)
async def http_exception_handler(request, exc):
    """Gestionnaire d'exceptions HTTP personnalis√©"""
    return JSONResponse(
        status_code=exc.status_code,
        content={
            "error": exc.detail,
            "status_code": exc.status_code,
            "timestamp": datetime.utcnow().isoformat()
        }
    )

@app.exception_handler(Exception)
async def general_exception_handler(request, exc):
    """Gestionnaire d'exceptions g√©n√©rales"""
    return JSONResponse(
        status_code=500,
        content={
            "error": "Internal server error",
            "message": str(exc),
            "timestamp": datetime.utcnow().isoformat()
        }
    )

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8080)